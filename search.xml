<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Preprocess the Image Data by NPP in TensorRT Model Inference</title>
    <url>/2020/06/17/en/trt_preproc_npp/</url>
    <content><![CDATA[<p>NVIDIA TensorRT(TRT) library is a high-performance deep learning
inference engine and delivers low latency and high-throughput for deep
learning inference applications. It allows users to convert the model
from other popular frameworks like pytorch or tensorflow. However,
TensorRT only supports float32 rather than uint8 data type as input data
type, which is the most common format for image data. In this case, when
we try to deploy the image-based tasks with TensorRT, it always needs to
convert the images from uint8 to float32, and then transfer the float32
image date to gpu to allow the TRT engine inference the model. When the
image size is large, this preprocessing stage is slightly slow. In this
blog, we are trying to introduce the NVIDIA NPP library to speed up this
preprocessing progress.</p>
<span id="more"></span>
<h2 id="experiments">Experiments</h2>
<p>This blog uses the environment shown below and used a detection model
trained by ssds.pytorch to do the experiments and evaluations. The model
uses ResNet18 as feature extractor and YoloV3 as detection head. The
model has already been converted to TRT with 1x3x736x1280 input and int8
computation precision.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYS: Ubuntu 18.04</span><br><span class="line">GPU: T4</span><br><span class="line">GCC: 7.5</span><br><span class="line">CMake: 3.16.6</span><br><span class="line">CUDA: 10.2</span><br><span class="line">CUDNN: 7.6.5</span><br><span class="line">TensorRT: 7.0</span><br><span class="line">OpenCV: 4.3.0/3.4.10</span><br></pre></td></tr></table></figure>
<p>It should be noted that when the model is converted to a TRT model,
TRT will select different kernel functions and their parameters
according to the GPU framework, and thus optimize the inference speed.
Therefore, it has to use the same GPU framework for TRT model generation
and execution. And even the TRT model generated by different types of
GPUs with the same framework, its inference speed will be slightly
weakened based on its execution gpu machine. For example, although
2080ti and t4 belong to the same 7.5 computing framework, when we infer
the model on T4, the model generated by 2080ti is 3 to 10% slower than
the model generated by T4.</p>
<h2 id="cpu-image-preprocessing">CPU image preprocessing</h2>
<p>In some deep learning frameworks, it can specify the input data type
&amp; format and the data preprocessing ops in the inference graph. For
example, when we freeze the weights into the frozen graph in tensorflow,
we can specify the data type accepted by the model during inference
through
<code>tf.placeholder(dtype=tf.uint8, shape=input_shape, name='image_tensor')</code>.
This preprocessing way is not supportted on TensorRT. TensorRT does
support multiple data types, and the data type of the input and output
ops can be determined by the converted onnx/uff file. However, when the
input and output data type of onnx/uff model is changed to other types
than float32, it can not be successfully converted into a TRT inference
model in the most cases.</p>
<p>This data type limitation in TensorRT is even more unfriendly to the
computer vision models. Images or videos in computer vision tasks are
often stored in the computer as uint8 data ([0, 255]) which is not
supported by TensorRT. In this case, the images must be converted to
float and then do the TensorRT model inference. In some tasks, the
resolution of the images or video clips of the input model is large,
such as 4k or 8k, and it is slow to tranfer the data from uint8 to float
in cpu and from cpu memory to gpu memory. In some cases, the time cost
of pre-processing and transmission is the bottleneck in model
deployment.</p>
<p>Most of the TRT projects on github often use the official <a
href="https://github.com/NVIDIA/TensorRT/blob/572d54f91791448c015e74a4f1d6923b77b79795/samples/opensource/sampleSSD/sampleSSD.cpp#L276-L309">TensorRT
example</a> to preprocess the image data in cpu, while I prefer to use
the OpenCV functions to preprocess the images. The code for these two
methods are shown as below.</p>
<details>
<summary>
Code: Preprocess data in cpu
</summary>
<p>TensorRT official preprocessing code <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SampleUffSSD::processInput</span><span class="params">(<span class="type">const</span> samplesCommon::BufferManager&amp; buffers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> inputC = mInputDims.d[<span class="number">0</span>];</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> inputH = mInputDims.d[<span class="number">1</span>];</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> inputW = mInputDims.d[<span class="number">2</span>];</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> batchSize = mParams.batchSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Available images</span></span><br><span class="line">    std::vector&lt;std::string&gt; imageList = &#123;<span class="string">&quot;dog.ppm&quot;</span>, <span class="string">&quot;bus.ppm&quot;</span>&#125;;</span><br><span class="line">    mPPMs.<span class="built_in">resize</span>(batchSize);</span><br><span class="line">    <span class="built_in">assert</span>(mPPMs.<span class="built_in">size</span>() &lt;= imageList.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; batchSize; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">readPPMFile</span>(<span class="built_in">locateFile</span>(imageList[i], mParams.dataDirs), mPPMs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span>* hostDataBuffer = <span class="built_in">static_cast</span>&lt;<span class="type">float</span>*&gt;(buffers.<span class="built_in">getHostBuffer</span>(mParams.inputTensorNames[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// Host memory for input buffer</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, volImg = inputC * inputH * inputW; i &lt; mParams.batchSize; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; inputC; ++c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// The color image to input should be in BGR order</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">unsigned</span> j = <span class="number">0</span>, volChl = inputH * inputW; j &lt; volChl; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                hostDataBuffer[i * volImg + c * volChl + j]</span><br><span class="line">                    = (<span class="number">2.0</span> / <span class="number">255.0</span>) * <span class="built_in">float</span>(mPPMs[i].buffer[j * inputC + c]) - <span class="number">1.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>OpenCV preprocessing code <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">imageToTensor</span><span class="params">(<span class="type">const</span> std::vector&lt;cv::Mat&gt; &amp; images, <span class="type">float</span> * tensor, <span class="type">const</span> <span class="type">int</span> batch_size, <span class="type">const</span> <span class="type">float</span> alpha, <span class="type">const</span> <span class="type">float</span> beta)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> height = images[<span class="number">0</span>].rows;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> width = images[<span class="number">0</span>].cols;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> channels = images[<span class="number">0</span>].<span class="built_in">channels</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> stridesCv[<span class="number">3</span>] = &#123; width * channels, channels, <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> strides[<span class="number">4</span>] = &#123; height * width * channels, height * width, width, <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> omp parallel for num_threads(c_numOmpThread) schedule(static, 1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>; b &lt; batch_size; b++)</span><br><span class="line">    &#123;</span><br><span class="line">        cv::Mat image_f;</span><br><span class="line">        images[b].<span class="built_in">convertTo</span>(image_f, CV_32F, alpha, beta);</span><br><span class="line">        std::vector&lt;cv::Mat&gt; split_channels = &#123;</span><br><span class="line">                cv::<span class="built_in">Mat</span>(images[b].<span class="built_in">size</span>(),CV_32FC1,tensor + b * strides[<span class="number">0</span>]),</span><br><span class="line">                cv::<span class="built_in">Mat</span>(images[b].<span class="built_in">size</span>(),CV_32FC1,tensor + b * strides[<span class="number">0</span>] + strides[<span class="number">1</span>]),</span><br><span class="line">                cv::<span class="built_in">Mat</span>(images[b].<span class="built_in">size</span>(),CV_32FC1,tensor + b * strides[<span class="number">0</span>] + <span class="number">2</span>*strides[<span class="number">1</span>]),</span><br><span class="line">        &#125;;</span><br><span class="line">        cv::<span class="built_in">split</span>(image_f, split_channels);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> batch_size * height * width * channels;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>The time cost of OpenCV preprocessing method(ms)</p>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 17%" />
<col style="width: 13%" />
<col style="width: 15%" />
<col style="width: 15%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">GPU(Precision)</th>
<th style="text-align: center;">Image2Float</th>
<th style="text-align: center;">Copy2GPU</th>
<th style="text-align: center;">Inference</th>
<th style="text-align: center;">GPU2CPU</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">t4(int8)</td>
<td style="text-align: center;">2.53026</td>
<td style="text-align: center;">0.935451</td>
<td style="text-align: center;">2.56143</td>
<td style="text-align: center;">0.0210528</td>
</tr>
</tbody>
</table>
</details>
<p>As shown in the example preprocessing code above, in the cpu, the
data is first converted to float type and normalized to [0,1]. The
arrangement is also permuted from NHWC to NCHW. Then the float data is
transferred to gpu memory to do TRT model inference. In the time cost
table, it shows that the speed of image preprocessing and transmission
for this model is actually greater than the speed of model inference. In
this case, the model deployed in gpu is not efficient and still has room
to speed up.</p>
<h2 id="gpu-image-preprocessing-by-npp">GPU Image Preprocessing by
NPP</h2>
<p>As mentioned, there are two reasons make the CPU image data
preprocessing slow: the efficiency of CPU to convert the image from
uint8 to float32 is low; since the float32 data is 4 times larger than
uint8 data, the transmission efficiency between cpu memory and gpu
memory is slower for float data. In this case, a simple speed-up way is
to transfer uint8 data to gpu and allows gpu to complete the conversion
from uint8 to float32. These processes can be done by NPP easily and
efficiently.</p>
<p>Nvidia NPP is a cuda library for GPU accelerated 2D image and signal
processing. It contains multiple submodules, which allows users to
efficiently do the image computation on the gpu like the data type
conversion, the color or geometric transformation and etc.. In this
example, the NPPC, NPPIDEI and NPPIAL in NPP are used to perform the
data type conversion from uint8 to float32 in the image data
preprocessing, the channel change from NHWC to NCHW, and the
normalization. The code is shown as follows.</p>
<details>
<summary>
Code: Preprocess data in gpu
</summary>
<p>NPP preprocessing code <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">imageToTensorGPUFloat</span><span class="params">(<span class="type">const</span> std::vector&lt;cv::Mat&gt; &amp; images, <span class="type">void</span> * gpu_images, <span class="type">void</span> * tensor, <span class="type">const</span> <span class="type">int</span> batch_size, <span class="type">const</span> <span class="type">float</span> alpha)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> height = images[<span class="number">0</span>].rows;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> width  = images[<span class="number">0</span>].cols;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> channels = images[<span class="number">0</span>].<span class="built_in">channels</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> stride = height * width * channels;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> stride_s = width * channels;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> dstOrder[<span class="number">3</span>] = &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    Npp32f scale[<span class="number">3</span>] = &#123;alpha, alpha, alpha&#125;;</span><br><span class="line">    NppiSize dstSize = &#123;width, height&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> omp parallel for num_threads(c_numOmpThread) schedule(static, 1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>; b &lt; batch_size; b++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cudaMemcpy</span>((Npp8u*)gpu_images + b * stride, images[b].data, stride, cudaMemcpyHostToDevice);</span><br><span class="line">        <span class="built_in">nppiSwapChannels_8u_C3IR</span>((Npp8u*)gpu_images + b * stride, stride_s, dstSize, dstOrder);</span><br><span class="line">        <span class="built_in">nppiConvert_8u32f_C3R</span>((Npp8u*)gpu_images + b * stride, stride_s, (Npp32f*)tensor, stride_s*<span class="built_in">sizeof</span>(<span class="type">float</span>), dstSize);</span><br><span class="line">        <span class="built_in">nppiMulC_32f_C3IR</span>(scale, (Npp32f*)tensor, stride_s*<span class="built_in">sizeof</span>(<span class="type">float</span>), dstSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> batch_size * stride;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>NPP preprocessing code (without normalization and channel
permutation) <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">imageToTensorGPUFloat</span><span class="params">(<span class="type">const</span> std::vector&lt;cv::Mat&gt; &amp; images, <span class="type">void</span> * gpu_images, <span class="type">void</span> * tensor, <span class="type">const</span> <span class="type">int</span> batch_size)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> height = images[<span class="number">0</span>].rows;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> width  = images[<span class="number">0</span>].cols;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> channels = images[<span class="number">0</span>].<span class="built_in">channels</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> stride = height * width * channels;</span><br><span class="line">    NppiSize dstSize = &#123;width, height&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> omp parallel for num_threads(c_numOmpThread) schedule(static, 1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>; b &lt; batch_size; b++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cudaMemcpy</span>((Npp8u*)gpu_images + b * stride, images[b].data, stride, cudaMemcpyHostToDevice);</span><br><span class="line">        <span class="built_in">nppiConvert_8u32f_C3R</span>((Npp8u*)gpu_images + b * stride, width * channels, (Npp32f*)tensor, width * channels*<span class="built_in">sizeof</span>(<span class="type">float</span>), dstSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> batch_size * stride;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>The time cost of NPP preprocessing (without normalization and channel
permutation) (ms)</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">GPU(Precision)</th>
<th style="text-align: center;">Image2GPU2Float</th>
<th style="text-align: center;">Inference</th>
<th style="text-align: center;">GPU2CPU</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">t4(int8)</td>
<td style="text-align: center;">0.532469</td>
<td style="text-align: center;">3.07869</td>
<td style="text-align: center;">0.0208867</td>
</tr>
</tbody>
</table>
</details>
<p>As shown in the example code above, for preprocessing in the gpu, the
uint8 data is first transferred to the gpu memory. Then the data
arrangement is permuted from NHWC to NCHW and finally the uint8 data
converted to the float type and normalized to [0., 1.]. The normalized
data is directly stored in the gpu memory reserved by the TRT model.
Since elementwise operation and channel permute are performed
efficiently in the TRT model, the normalization and channel conversion
in the preprocessing can be moved to the model as operations. Compared
with CPU image preprocessing, the GPU image preprocessing time is
reduced from 3.5ms to 0.5ms, the total running time of the entire model
is reduced from 6ms to 3.5ms, and the frame processing per second (fps)
is from 166 frames raised to 285 frames, the overall speed has reached
1.7 times faster.</p>
<p>It should be noted that due to the long conversion time of the TRT
model, the example in this blog only tests the execution speed when
batch is 1. If large batches are encountered during deployment and the
gpu preprocessing speed is slow, it may be due to the cuda code
execution and transmission. In this case, it would be better to copy the
entire batch of images to the GPU memory and the data type conversion to
improve the preprocessing speed in the batch. Another way to speed up
the progress is process each image sample in a stream.</p>
<h2 id="reference">Reference</h2>
<ul>
<li><a
href="https://docs.nvidia.com/deeplearning/tensorrt/api/python_api/infer/FoundationalTypes/DataType.html">tensorrt
document</a></li>
<li><a href="https://developer.nvidia.com/cuda-gpus#compute">gpu
computation framework</a></li>
<li><a
href="https://github.com/ShuangXieIrene/ssds.pytorch">ssds.pytorch</a></li>
</ul>
]]></content>
      <categories>
        <category>model inference</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>cuda</tag>
        <tag>tensorrt</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Visualization with Hand-Drawn/Sketchy Style</title>
    <url>/2022/04/19/en/sketchy_rendering/</url>
    <content><![CDATA[<p>Data visualization can help to understand and analyze statistical
data in a more intuitive way by graphing the data. In recent years, it
is common to see companies using hand-drawn data visualization in user
reports or blogs to make their content and style more relatable. This
article lists some common data visualization tools and applicable
charts.</p>
<table>
<colgroup>
<col style="width: 1%" />
<col style="width: 23%" />
<col style="width: 27%" />
<col style="width: 27%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Tools</th>
<th style="text-align: center;"><a
href="https://github.com/rough-stuff/rough">rough</a> + <a
href="https://app.diagrams.net/">draw.io</a></th>
<th style="text-align: center;"><a
href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.xkcd.html">matplotlib.pyplot.xkcd</a></th>
<th style="text-align: center;"><a
href="https://github.com/timqian/chart.xkcd">chart.xkcd</a> &amp; <a
href="https://github.com/cutecharts/cutecharts.py">cutecharts</a></th>
<th style="text-align: center;"><a
href="https://instad.io/documentation">instad.io</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Scope</td>
<td style="text-align: center;">For existing draw.io charts, svg charts
or charts that need to be drawn directly on the canvas</td>
<td style="text-align: center;">For data visualization charts,
especially those generated by matplotlib or seaborn. Embedded in jupyter
labs/notebooks</td>
<td style="text-align: center;">For data visualization charts with
interactive requirements. Embedded in web pages or jupyter
lab/notebooks</td>
<td style="text-align: center;">For existing svg or spreadsheet charts.
Can be converted directly to hand-drawn style</td>
</tr>
<tr class="even">
<td style="text-align: center;">Charts</td>
<td style="text-align: center;">Any chart, especially for direct
diagrams such as flowcharts, class charts or timeline charts, etc.</td>
<td style="text-align: center;">Suitable for most data visualization
charts, such as line, bar, pie, contour, etc.</td>
<td style="text-align: center;">Only supports 'bar', 'line', 'pie',
'radar', 'scatter'</td>
<td style="text-align: center;">Any chart, only requires DOM input
format SVG or PDF charts</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="draw-diagram-with-hand-drawn-style">Draw Diagram with Hand-Drawn
Style</h2>
<h3 id="rough-draw.io"><a
href="https://github.com/rough-stuff/rough">rough</a> + <a
href="https://app.diagrams.net/">draw.io</a></h3>
<p><a href="https://github.com/rough-stuff/rough">rough</a> is a very
powerful hand-drawn style base tool for implementing basic drawing
elements in hand-drawn style on Canvas and SVG. rough is a very small js
library (~9KB) that defines basic units for drawing lines, curves ,
arcs, polygons, circles and ellipses as basic units. We can implement
hand-drawn images on Canvas by defining some basic units on the js side,
a simple example of which is shown below.</p>
<script src="https://unpkg.com/roughjs@latest/bundled/rough.js"></script>
<canvas id="canvas" width="600" height="400">
</canvas>
<script>
    const rc = rough.canvas(document.getElementById("canvas"));

    //line and rectangle
    rc.rectangle(10, 10, 100, 100, {
    fill: "red",
    stroke: "blue",
    hachureAngle: 60,
    hachureGap: 10,
    fillWeight: 5,
    strokeWidth: 5,
    });

    //overlapping circles
    rc.circle(200, 60, 80, {
    stroke: "red",
    strokeWidth: 4,
    fill: "rgba(0,255,0,1)",
    fillWeight: 4,
    hachureGap: 6,
    });
    rc.circle(250, 60, 80, {
    stroke: "blue",
    strokeWidth: 4,
    fill: "rgba(255,255,0,1)",
    fillWeight: 4,
    hachureGap: 6,
    });

    // arcs
    rc.arc(450, 100, 200, 180, Math.PI, Math.PI * 1.6, true);
    rc.arc(450, 100, 200, 180, 0, Math.PI / 2, true, {
    stroke: "red",
    strokeWidth: 4,
    fill: "rgba(255,255,0,0.4)",
    fillStyle: "solid",
    });
    rc.arc(450, 100, 200, 180, Math.PI / 2, Math.PI, true, {
    stroke: "blue",
    strokeWidth: 2,
    fill: "rgba(255,0,255,0.4)",
    });

    // draw sine curve
    let points = [];
    for (let i = 0; i < 20; i++) {
    // 4pi - 400px
    let x = (400 / 20) * i + 10;
    let xdeg = (Math.PI / 100) * x;
    let y = Math.round(Math.sin(xdeg) * 90) + 250;
    points.push([x, y]);
    }
    rc.curve(points, {
    roughness: 1.2,
    stroke: "red",
    strokeWidth: 3,
    });
</script>
<details>
<summary>
rough render code
</summary>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/roughjs@latest/bundled/rough.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> rc = rough.<span class="title function_">canvas</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//line and rectangle</span></span></span><br><span class="line"><span class="language-javascript">    rc.<span class="title function_">rectangle</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fill</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">stroke</span>: <span class="string">&quot;blue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">hachureAngle</span>: <span class="number">60</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">hachureGap</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fillWeight</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">strokeWidth</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//overlapping circles</span></span></span><br><span class="line"><span class="language-javascript">    rc.<span class="title function_">circle</span>(<span class="number">200</span>, <span class="number">60</span>, <span class="number">80</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">stroke</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">strokeWidth</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fill</span>: <span class="string">&quot;rgba(0,255,0,1)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fillWeight</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">hachureGap</span>: <span class="number">6</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    rc.<span class="title function_">circle</span>(<span class="number">250</span>, <span class="number">60</span>, <span class="number">80</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">stroke</span>: <span class="string">&quot;blue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">strokeWidth</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fill</span>: <span class="string">&quot;rgba(255,255,0,1)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fillWeight</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">hachureGap</span>: <span class="number">6</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// arcs</span></span></span><br><span class="line"><span class="language-javascript">    rc.<span class="title function_">arc</span>(<span class="number">450</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">1.6</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    rc.<span class="title function_">arc</span>(<span class="number">450</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">true</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">stroke</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">strokeWidth</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fill</span>: <span class="string">&quot;rgba(255,255,0,0.4)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fillStyle</span>: <span class="string">&quot;solid&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    rc.<span class="title function_">arc</span>(<span class="number">450</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">true</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">stroke</span>: <span class="string">&quot;blue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">strokeWidth</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fill</span>: <span class="string">&quot;rgba(255,0,255,0.4)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// draw sine curve</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> points = [];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4pi - 400px</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> x = (<span class="number">400</span> / <span class="number">20</span>) * i + <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> xdeg = (<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">100</span>) * x;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> y = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">sin</span>(xdeg) * <span class="number">90</span>) + <span class="number">250</span>;</span></span><br><span class="line"><span class="language-javascript">    points.<span class="title function_">push</span>([x, y]);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    rc.<span class="title function_">curve</span>(points, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">roughness</span>: <span class="number">1.2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">stroke</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">strokeWidth</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>
<p>Because of its small size and ease of use, rough is <a
href="https://github.com/rough-stuff/rough#organizations">embedded in
many software to achieve hand-drawn style</a>, such as <a
href="https://app.diagrams.net/">draw.io</a>, which I use a lot. draw.io
is a free online diagram editor, which is light and feature-rich, and
supports instant store and multi-person online editing. It is an ideal
tool for study and work. draw.io supports hand-drawn style diagramming
throughrough around 2020, and there is <a
href="https://drawio-app.com/introducing-draw-ios-new-sketch-feature/">an
official blog about this feature</a>. In short, we first need to select
the hand-drawn style (sketch) on the right side of the overall chart
style, and if we need to fine-tune the hand-drawn style of each element,
we need to select the corresponding one by the fill method and line of
each element, or even change the sketch style by the property of the
drawing unit. If text is needed, the font should be changed to Comic
Sans MS. The simple process is shown in the figure below.</p>
<img data-src="/2022/04/19/en/sketchy_rendering/drawio_example.jpg" class="" title="drawio draws hand-drawn style flowcharts">
<p>With draw.io, you can style most of the diagrams into a hand-drawn
style, such as flowcharts.</p>
<h3 id="matplotlib.pyplot.xkcd"><a
href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.xkcd.html">matplotlib.pyplot.xkcd</a></h3>
<p>Matplotlib is the most commonly used data visualization library in
python. Matplotlib itself also supports hand-drawn style. Matplotlib
loads and controls the hand-drawn style through its
matplotlib.pyplot.xkcd api. To use it, you just need to put the original
matplotlib plot inside of <code>with matplotlib.pyplot.xkcd()</code>
scope to convert the image to hand-drawn style. This method is also
applicable to the seaborn data visualization library as well, which is
based on matplotlib. An example is shown below, Figure 1 represents the
pie chart drawn by the original matplotlib, and Figure 2 represents the
pie chart converted to hand-drawn style by placing the original
matplotlib plot in <code>with matplotlib.pyplot.xkcd()</code>.</p>
<img data-src="/2022/04/19/en/sketchy_rendering/matplotlib_raw.jpg" class="" title="matplotlib_raw">
<details>
<summary>
matplotlib original render code
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(dpi=<span class="number">150</span>)</span><br><span class="line">patches, texts, autotexts = plt.pie(</span><br><span class="line">    x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">    labels=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">    colors=[<span class="string">&#x27;#dc2624&#x27;</span>, <span class="string">&#x27;#2b4750&#x27;</span>, <span class="string">&#x27;#45a0a2&#x27;</span>],</span><br><span class="line">    autopct=<span class="string">&#x27;%.2f%%&#x27;</span>,</span><br><span class="line">    explode=(<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">texts[<span class="number">1</span>].set_size(<span class="string">&#x27;20&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#matplotlib.patches.Wedge</span></span><br><span class="line">patches[<span class="number">0</span>].set_alpha(<span class="number">0.3</span>) </span><br><span class="line">patches[<span class="number">2</span>].set_hatch(<span class="string">&#x27;|&#x27;</span>) </span><br><span class="line">patches[<span class="number">1</span>].set_hatch(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(</span><br><span class="line">    patches,</span><br><span class="line">    [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">    title=<span class="string">&quot;Pie Learning&quot;</span>,</span><br><span class="line">    loc=<span class="string">&quot;center left&quot;</span>,</span><br><span class="line">    fontsize=<span class="number">15</span>,</span><br><span class="line">    bbox_to_anchor=(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;Lovely pie&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
</details>
<img data-src="/2022/04/19/en/sketchy_rendering/matplotlib_xkcd.jpg" class="" title="matplotlib_xkcd">
<details>
<summary>
matplotlib.xkcd render code
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">with</span> plt.xkcd(</span><br><span class="line">        scale=<span class="number">4</span>,  <span class="comment">#the magnitude of the folds, comparing with normal style</span></span><br><span class="line">        length=<span class="number">120</span>,  <span class="comment">#the length of the folds</span></span><br><span class="line">        randomness=<span class="number">2</span>):  <span class="comment">#the randomness of the folds</span></span><br><span class="line">    plt.figure(dpi=<span class="number">150</span>)</span><br><span class="line">    patches, texts, autotexts = plt.pie(</span><br><span class="line">        x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        labels=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">        colors=[<span class="string">&#x27;#dc2624&#x27;</span>, <span class="string">&#x27;#2b4750&#x27;</span>, <span class="string">&#x27;#45a0a2&#x27;</span>],</span><br><span class="line">        autopct=<span class="string">&#x27;%.2f%%&#x27;</span>,</span><br><span class="line">        explode=(<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    texts[<span class="number">1</span>].set_size(<span class="string">&#x27;20&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment">#matplotlib.patches.Wedge</span></span><br><span class="line">    patches[<span class="number">0</span>].set_alpha(<span class="number">0.3</span>)</span><br><span class="line">    patches[<span class="number">2</span>].set_hatch(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    patches[<span class="number">1</span>].set_hatch(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.legend(</span><br><span class="line">        patches,</span><br><span class="line">        [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], </span><br><span class="line">        title=<span class="string">&quot;Pie Learning&quot;</span>,</span><br><span class="line">        loc=<span class="string">&quot;center left&quot;</span>,</span><br><span class="line">        fontsize=<span class="number">15</span>,</span><br><span class="line">        bbox_to_anchor=(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    plt.title(<span class="string">&#x27;Lovely pie&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
</details>
<p>When using matplotlib or seaborn for data visualization, this method
makes it easy and convenient to convert patterns into a hand-drawn
style.</p>
<h2
id="interactive-diagram-with-hand-drawn-stylechart.xkcd-cutecharts">Interactive
Diagram with Hand-Drawn Style：<a
href="https://github.com/timqian/chart.xkcd">chart.xkcd</a> &amp; <a
href="https://github.com/cutecharts/cutecharts.py">cutecharts</a></h2>
<p>When talking about hand-drawn style data visualization, <a
href="https://github.com/timqian/chart.xkcd">chart.xkcd</a> and <a
href="https://github.com/cutecharts/cutecharts.py">cutecharts</a> are
probably two of the most popular tools.</p>
<p><a href="https://github.com/timqian/chart.xkcd">chart.xkcd</a> is a
JavaScript library for interactive hand-drawn style data visualization,
while <a
href="https://github.com/cutecharts/%20cutecharts.py">cutecharts</a> is
a wrapper of <a
href="https://github.com/timqian/chart.xkcd">chart.xkcd</a> to
python.</p>
<p>The hand-drawn style effect of <a
href="https://github.com/timqian/chart.xkcd">chart.xkcd</a> is shown
below.</p>
<script src="https://cdn.jsdelivr.net/npm/chart.xkcd@1.1/dist/chart.xkcd.min.js"></script>
<svg class="line-chart" style="text-align: center; width: 100%;">
</svg>
<script>
// querySelector() 方法返回文档中匹配指定 CSS 选择器的一个元素。获取文档中 class=".line-chart" 的元素。
const svg = document.querySelector('.line-chart');

// chartXkcd.Line 创建一个折线图
const lineChart = new chartXkcd.Line(svg, {
    //图表的标题
    title: 'Monthly income of an indie developer',
    // 图表的 x 标签
    xLabel: 'Month',
    // 图表的 y 标签
    yLabel: '$ Dollors',
    // 需要可视化的数据
    data: {
        // x 轴数据
        labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
        // y 轴数据
        datasets: [{
            // 第一组数据
            label: 'Plan',
            data: [30, 70, 200, 300, 500, 800, 1500, 2900, 5000, 8000],
        }, {
            // 第二组数据
            label: 'Reality',
            data: [0, 1, 30, 70, 80, 100, 50, 80, 40, 150],
        }],
    },
    // 可选配置以自定义图表的外观
    options: {
        // 自定义要在 y 轴上看到的刻度号（默认为 3）
        yTickCount: 3,
        // 指定要放置图例的位置
        legendPosition: chartXkcd.config.positionType.upLeft
    }
});
</script>
<details>
<summary>
chart.xkcd render code
</summary>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/chart.xkcd@1.1/dist/chart.xkcd.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;line-chart&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center; width: 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// querySelector() 方法返回文档中匹配指定 CSS 选择器的一个元素。获取文档中 class=&quot;.line-chart&quot; 的元素。</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> svg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.line-chart&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// chartXkcd.Line 创建一个折线图</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> lineChart = <span class="keyword">new</span> chartXkcd.<span class="title class_">Line</span>(svg, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: <span class="string">&#x27;Monthly income of an indie developer&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">xLabel</span>: <span class="string">&#x27;Month&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">yLabel</span>: <span class="string">&#x27;$ Dollors&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// x axis</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">labels</span>: [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;10&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// y axis</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">datasets</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// data group 1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">label</span>: <span class="string">&#x27;Plan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: [<span class="number">30</span>, <span class="number">70</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">800</span>, <span class="number">1500</span>, <span class="number">2900</span>, <span class="number">5000</span>, <span class="number">8000</span>],</span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// data group 2</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">label</span>: <span class="string">&#x27;Reality&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">30</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="number">150</span>],</span></span><br><span class="line"><span class="language-javascript">        &#125;],</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// style options</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">options</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">yTickCount</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">legendPosition</span>: chartXkcd.<span class="property">config</span>.<span class="property">positionType</span>.<span class="property">upLeft</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>
<p>The api of <a
href="https://github.com/cutecharts/cutecharts.py">cutecharts</a> is
very close to that of <a
href="https://github.com/pyecharts/pyecharts">pyechart</a>, and the
example is shown below.</p>
<svg id="chart_68967376df93415eb5377f0bb8ef5c60">
</svg>
<script>
    const svg_68967376df93415eb5377f0bb8ef5c60 = document.querySelector('#chart_68967376df93415eb5377f0bb8ef5c60')
    const chart_68967376df93415eb5377f0bb8ef5c60 = new chartXkcd.Bar(svg_68967376df93415eb5377f0bb8ef5c60, {"title": "MVP of LOL Bar", "data": {"datasets": [{"label": "MVP", "data": [3, 2, 1]}], "labels": ["Faker", "Easyhoon", "Pawn"]}, "xLabel": "LOLers", "yLabel": "MVPs", "options": {"yTickCount": 3}});
</script>
<details>
<summary>
cutecharts render code
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cutecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_base</span>() -&gt; Bar:</span><br><span class="line">    chart = Bar(<span class="string">&quot;MVP of LOL Bar&quot;</span>)</span><br><span class="line">    chart.set_options(</span><br><span class="line">        labels=[<span class="string">&#x27;Faker&#x27;</span>, <span class="string">&#x27;Easyhoon&#x27;</span>, <span class="string">&#x27;Pawn&#x27;</span>],</span><br><span class="line">        x_label=<span class="string">&#x27;LOLers&#x27;</span>,</span><br><span class="line">        y_label=<span class="string">&#x27;MVPs&#x27;</span>)</span><br><span class="line">    chart.add_series(<span class="string">&#x27;MVP&#x27;</span>, [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> chart</span><br><span class="line"></span><br><span class="line">bar_base().render_notebook()</span><br><span class="line"><span class="comment"># bar_base().render()</span></span><br></pre></td></tr></table></figure>
<p>Similar to pyechart, using <code>bar_base().render()</code> will
generate the chart as an html file, i.e. the pattern rendered in the
above image, the generated code is as follows.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/chart.xkcd@1.1/dist/chart.xkcd.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;68967376df93415eb5377f0bb8ef5c60&quot;</span> <span class="attr">class</span>=<span class="string">&quot;chart-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 800px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">&quot;chart_68967376df93415eb5377f0bb8ef5c60&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> svg_68967376df93415eb5377f0bb8ef5c60 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chart_68967376df93415eb5377f0bb8ef5c60&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> chart_68967376df93415eb5377f0bb8ef5c60 = <span class="keyword">new</span> chartXkcd.<span class="title class_">Bar</span>(svg_68967376df93415eb5377f0bb8ef5c60, &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;MVP of LOL Bar&quot;</span>, <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;datasets&quot;</span>: [&#123;<span class="string">&quot;label&quot;</span>: <span class="string">&quot;MVP&quot;</span>, <span class="string">&quot;data&quot;</span>: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]&#125;], <span class="string">&quot;labels&quot;</span>: [<span class="string">&quot;Faker&quot;</span>, <span class="string">&quot;Easyhoon&quot;</span>, <span class="string">&quot;Pawn&quot;</span>]&#125;, <span class="string">&quot;xLabel&quot;</span>: <span class="string">&quot;LOLers&quot;</span>, <span class="string">&quot;yLabel&quot;</span>: <span class="string">&quot;MVPs&quot;</span>, <span class="string">&quot;options&quot;</span>: &#123;<span class="string">&quot;yTickCount&quot;</span>: <span class="number">3</span>&#125;&#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>
<p>It is a pity that chart.xkcd and cutecharts have limited support for
graph categories, only supporting 'bar', 'line', 'pie', 'radar',
'scatter'. Its api also does not support many features, such as
auxiliary lines or additional annotations. And the developer has stopped
development around 2019, so it is also hard to support different kinds
of charts and functions in the foreseeable future. These limitations
make it really hard to be comparable with plotly, echart or pyechart in
the most usecases.</p>
<p>There are some other libraries which are similar to chart.xkcd and
cutecharts: <a
href="https://github.com/beizhedenglong/rough-charts">rough-charts</a>
and <a href="https://github.com/jwilber/roughViz">roughViz</a> are
JavaScript library based on rough and d3, and <a
href="https://github.com/charlesdong1991/py-roughviz">py-roughviz</a>, a
python library wrapped in <a
href="https://github.com/jwilber/roughViz">roughViz</a> also implements
hand-drawn style data visualization. But its function is similar to
chart.xkcd and cutecharts, the api is relatively complicated, as well as
more or less stopped the development. Therefore, I don't introduce the
detail of those tools, more reference could be found in the official
documentation and examples.</p>
<h2 id="convert-diagram-to-hand-drawn-styleinstad.io">Convert Diagram to
Hand-Drawn Style：<a
href="https://instad.io/documentation">instad.io</a></h2>
<p>In addition to the above methods, we can also convert existing svg
(which can be generated by libraries such as pyechart or matplotlib or
software such as draw.io, PS, AI, etc.) or spreadsheet charts by <a
href="https://instad.io/documentation">instad.io</a> into hand-drawn
style. The result is shown in the figure below. For a detailed example,
please refer to <a href="https://instad.io/">instad.io</a>.</p>
<img data-src="/2022/04/19/en/sketchy_rendering/instad_1.jpg" class="" title="instad_samples_1">
<img data-src="/2022/04/19/en/sketchy_rendering/instad_2.jpg" class="" title="instad_samples_2">
<p>The workflow of instad.io is straight-forward: start from a given
root DOM element, find all SVG objects, then recursively find all child
elements, read out the basic attributes of the child elements, and use
roughjs to create a hand-drawn style copy of the element, hiding the
original element. This way the hand-drawn style SVG element replaces the
original graphic.</p>
]]></content>
      <tags>
        <tag>xkcd</tag>
        <tag>javascript</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
